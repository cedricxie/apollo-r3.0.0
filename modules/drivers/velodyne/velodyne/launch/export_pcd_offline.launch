<launch>
  <!-- Play a bag only contains topics '/apollo/sensor/velodyne64/VelodyneScanUnified' and '/tf' to make this launch file work -->
  <arg name="velodyne64_calibration_online" default="true" />
  <!--If 'velodyne64_calibration_online' is true, 'velodyne64_calibration_file' will not use  -->
  <arg name="velodyne64_calibration_file" default="$(find velodyne_pointcloud)/params/64E_S3_calibration_example.yaml"/>
  <arg name="extrinsics_velodyne64" default="$(find velodyne_pointcloud)/params/velodyne64_novatel_extrinsics_example.yaml"/>
  <arg name="velodyne64_frame_id" default="velodyne64"/>
  <arg name="organized" default="false"/>
  <arg name="min_range" default="0.9" />
  <arg name="max_range_64" default="70.0" />
  <arg name="rpm" default="600"/>
  <!-- 64E_S3D_STRONGEST | 64E_S3D_LATEST | 64E_S3D_DUAL -->
  <arg name="model" default="64E_S3D_STRONGEST" />
  <!-- 100ms -->
  <arg name="tf_query_timeout" default="0.1"/>
  <arg name="pcd_folder" value="/apollo/data/pcd" />
  <arg name="nodelet_manager_name" default="velodyne_nodelet_manager" />

  <include file="$(find velodyne_pointcloud)/launch/nodelet_manager.launch">
    <arg name="nodelet_manager_name" value="$(arg nodelet_manager_name)"/>
  </include>
  
  <!-- start convert nodelet-->
  <include file="$(find velodyne_pointcloud)/launch/convert_nodelet.launch">
    <arg name="node_name" value="sensor_velodyne64_convert"/>
    <arg name="nodelet_manager_name" value="$(arg nodelet_manager_name)"/>
    <arg name="model" value="$(arg model)"/>
    <arg name="calibration_online" value="$(arg velodyne64_calibration_online)" />
    <arg name="calibration" value="$(arg velodyne64_calibration_file)" />
    <arg name="organized" value="$(arg organized)"/>
    <arg name="min_range" value="$(arg min_range)" />
    <arg name="max_range" value="$(arg max_range_64)" />
    <arg name="topic_pointcloud" value="/apollo/sensor/velodyne64/PointCloud2"/>
    <arg name="topic_packets" value="/apollo/sensor/velodyne64/VelodyneScanUnified"/>
  </include>
  
   <!-- start compensator nodelet -->
  <include file="$(find velodyne_pointcloud)/launch/compensator_nodelet.launch">
    <arg name="node_name" value="sensor_velodyne64_compensator"/>
    <arg name="nodelet_manager_name" value="$(arg nodelet_manager_name)"/>
    <arg name="child_frame_id" value="$(arg velodyne64_frame_id)"/>
    <arg name="tf_query_timeout" value="$(arg tf_query_timeout)"/>
    <arg name="topic_pointcloud" value="/apollo/sensor/velodyne64/PointCloud2"/>
    <arg name="topic_compensated_pointcloud" value="/apollo/sensor/velodyne64/compensator/PointCloud2"/>
  </include>

  <include file="$(find velodyne_pointcloud)/launch/pcd_exporter_nodelet.launch">
    <arg name="nodelet_manager_name" value="$(arg nodelet_manager_name)"/>
    <arg name="pcd_folder" value="$(arg pcd_folder)"/>
    <arg name="skip_static_frames" default="false"/>
    <arg name="child_frame_id" default="velodyne64"/>
    <arg name="stamp_file" default="$(arg pcd_folder)/stamp.txt"/>
    <arg name="pose_file" default="$(arg pcd_folder)/pose.txt"/>
    <arg name="topic_pointcloud" default="/apollo/sensor/velodyne64/compensator/PointCloud2"/>
    <arg name="queue_size" default="10"/>
  </include>

  <node pkg="velodyne_pointcloud" type="extrinsics_broadcaster.py"
    args="$(arg extrinsics_velodyne64)" name="static_transform_velodyne64" />

</launch>
